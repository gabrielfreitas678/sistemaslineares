
const generateEmptyTableBut = document.querySelector(".generateEmptyTable"), matrizScreen = document.querySelector(".matriz"), generateMatriz = document.querySelector("footer .generateMatriz"), tbody = document.querySelector("tbody"), tbody2 = document.querySelector(".tbody2"), input = document.querySelector(".qtdVariaveis"), ul = document.querySelector(".results ul"), resultsScreen = document.querySelector(".results"), li = document.querySelector(".results li"), thead = document.querySelectorAll("thead"), table = document.querySelectorAll("table"), novaMatriz = document.querySelector(".novaMatriz"); function gaussSolver(e, t) { var r, l, n, a, o; for (n = 0; n < e.length - 1; n++) { var i = Math.abs(e[n][n]), u = n; for (r = n + 1; r < e.length; r++)i < Math.abs(e[r][n]) && (i = Math.abs(e[r][n]), u = r); if (u != n) { for (l = 0; l < e.length; l++) { var s = e[n][l]; e[n][l] = e[u][l], e[u][l] = s } s = t[n], t[n] = t[u], t[u] = s } if (0 == e[n][n]) return null; for (o = n + 1; o < e.length; o++) { var c = -e[o][n] / e[n][n]; for (e[o][n] = 0, t[o] = t[o] + c * t[n], a = n + 1; a < e.length; a++)e[o][a] = e[o][a] + c * e[n][a] } } var d = []; for (r = e.length - 1; r >= 0; r--) { for (d[r] = t[r], l = r + 1; l < e.length; l++)d[r] = d[r] - d[l] * e[r][l]; d[r] = d[r] / e[r][r] } return d } let variaveis = input.value ? 3 : input.value; function setEmptyTable(e = input.value) { console.log(variaveis); var t = "", r = "", l = ""; for (let r = 0; r < e; r++) { l += `<th>i <sub> ${r + 1}</sub></th>`, t += "<tr>"; for (let l = 0; l < e; l++)t += `<td><input   class="col${l} line${r} inputs" placeholder=" ${r},${l}  "></input>  </td>`; t += "</tr>" } tbody.innerHTML = t, thead[0].innerHTML = l; for (let t = 0; t < e; t++)r += "<tr>", r += `<td><div class="values"> <p>=</p> <input  placeholder=" ${t} "></input>  </div></td>`, r += "</tr>"; thead[1].innerHTML, thead[1].innerHTML = "<th>n</th>", tbody2.innerHTML = r } function genarateMatriz(e) { console.log(e); let t = [], r = [], l = [], n = ""; for (let t = 0; t < e; t++) { for (let r = 0; r < e; r++)n += tbody.children[t].children[r].children[0].value, l.push(Number(n)), n = ""; r.push(l), l = [] } for (let r = 0; r < e; r++)n += tbody2.children[r].children[0].children[0].children[1].value, t.push(Number(n)), n = ""; return { A: r, b: t } } setEmptyTable(5), generateEmptyTableBut.addEventListener("click", (e => { setEmptyTable(input.value) })), novaMatriz.addEventListener("click", (e => { window.location.reload() })), generateMatriz.addEventListener("click", (e => { matrizScreen.classList.add("hideDisplay"), resultsScreen.classList.add("showDisplay"), generateMatriz.classList.add("hideDisplay"), novaMatriz.classList.add("showDisplay"); const { A: t, b: r } = genarateMatriz(input.value), l = gaussSolver(t, r); ul.innerHTML = ""; for (let e = 0; e < l.length; e++)ul.innerHTML += ` <li><p>i<sub>${e + 1}:</sub>${l[e]}A</p></li>` }));